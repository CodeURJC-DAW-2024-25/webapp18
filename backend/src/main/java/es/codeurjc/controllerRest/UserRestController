package es.codeurjc.controller;

// Spring
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import es.codeurjc.model.Apartment;
import es.codeurjc.model.Reservation;
import es.codeurjc.model.Review;
import es.codeurjc.model.UserE;
import es.codeurjc.service.ApartmentService;
import es.codeurjc.service.UserService;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.io.IOException;
import java.sql.SQLException;

import org.springframework.core.io.Resource;
import org.hibernate.engine.jdbc.BlobProxy;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import org.springframework.security.crypto.password.PasswordEncoder;

import jakarta.servlet.http.HttpServletRequest;

@Controller
public class UserController {

    @Autowired
    private UserService userService;

    @Autowired
    private ApartmentService apartmentService;

    @Autowired
    private PasswordEncoder passwordEncoder;


    @GetMapping("/")
    public Collection<Apartment> getRecommendedApartments(HttpServletRequest request) {
        
        List<Apartment> recomendedApartments = new ArrayList<>();

        try {
            String nick = request.getUserPrincipal().getName();
            UserE user = userService.findByNick(nick).orElseThrow();
            List<Reservation> userReservations = user.getReservations();
            recomendedApartments = userService.findRecomendedApartments(6, userReservations, user);

        } catch (NullPointerException e) {
            // Handle case when user is not authenticated
        } finally {
            if (recomendedApartments.size() < 6) {
                // size +1 to avoid looking for id = 0 if size = 0
                for (int i = recomendedApartments.size() + 1; i < 7; i++) {
                    try {
                        Apartment apartment = apartmentService.findById((long) i).orElseThrow();
                        // Only add apartments whose managers are validated
                        if (apartment != null && apartment.getManager().getvalidated()) {
                            recomendedApartments.add(apartment);
                        }
                    } catch (Exception ex) {
                        // Skip this apartment if not found
                        continue;
                    }
                }
            }
        }
        return recomendedApartments;
    }

}